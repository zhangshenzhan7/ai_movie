# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak
venv.bak

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
.idea/

# Node.js runtime for video processing
node_modules/

# Video files and temporary files
*.mp4
*.avi
*.mov
*.mkv
*.wav
*.mp3
*.ogg
*.flv
*.webm

# Temporary video processing files
temp/
tmp/
temp_*/
tmp_*/

# Database files (if using SQLite)
*.db
*.sqlite

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/

# Project specific ignored files
.env.local
.env.*.local

# Test results and reports
test_report.json
test_report.html
test_results.json
test_summary.json
*_test_report.json
*_check_result.json

# Temporary scripts and tools
check_*.py
test_*.py
debug_*.py
temp_*.py

# AI Movie specific output
/output
/output/
output/
state.csv

# Runtime and deployment
.roo

# IDEs and editors
.idea/
.vscode/
*.swp
*.swo
*~
.vim/

# Project specific configurations
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local
config.local.py
local_config.py

# Database backups and dumps
*.sql
*.dump
*.backup
db_backup/
database_backup/

# Session and cache files
flask_session/
sessions/
cache/
.cache/
redis.rdb

# Media and upload files
uploads/
media/
static/uploads/
user_uploads/

# OSS and cloud storage temporary files
oss_temp/
cloud_temp/
*.oss
*.cloud

# API keys and secrets (additional protection)
api_keys.txt
secrets.txt
credentials.json
service-account-key.json
*.pem
*.key
*.cert
*.crt

# Development and testing artifacts
test_output/
test_videos/
test_images/
debug_output/
profile_output/
benchmark_results/

# Documentation build artifacts
docs/build/
docs/_build/
docs/.doctrees/
_build/

# Package manager files
package-lock.json
yarn.lock
Pipfile
Pipfile.lock
poetry.lock

# Jupyter notebook checkpoints
.ipynb_checkpoints/
*.ipynb

# Python virtual environments (additional patterns)
.Python
pyvenv.cfg
venv*/
env*/
.venv*/
.env*/

# System and temporary files
*.tmp
*.temp
.temporary/
.system/
System Volume Information/
$RECYCLE.BIN/

# Backup files
*.bak
*.backup
*.old
*.orig
*~

# Lock files
*.lock
.lock

# Compiled and binary files
*.pyc
*.pyo
*.pyd
*.so
*.dll
*.exe
*.com

# Archive files
*.zip
*.tar.gz
*.tar.bz2
*.rar
*.7z

# Performance and profiling
*.prof
*.profile
.coverage
coverage.xml
htmlcov/

# AI model files (usually large)
*.model
*.h5
*.pkl
*.pickle
*.joblib
models/
checkpoints/
weights/

# Error and crash dumps
crash_*.log
error_*.log
core.*
*.dmp

# Project specific temporary files
cookies.txt
test_auth.html
debug_*.html
temp_*.html

# Video processing temporary files
video_temp/
audio_temp/
processing_temp/
render_temp/

# AI service cache
dashscope_cache/
ai_cache/
model_cache/

# Monitoring and logs
monitoring/
metrics/
traces/
*.access.log
*.error.log
access.log*
error.log*

# Build and deployment
build/
dist/
release/
deploy/
.build/
.dist/

# Container and virtualization
Docker/
.docker/
Vagrantfile
.vagrant/

# CI/CD
.github/workflows/local*
.gitlab-ci-local.yml
.travis.local.yml

# Security scanning results
security_report.*
vulnerability_scan.*

# Load testing and performance
load_test_results/
performance_tests/
benchmark_data/