[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-movie-generator"
version = "0.1.0"
authors = [
    {name = "AI Movie Team", email = "contact@ai-movie.com"},
]
description = "AI-powered video generation from text descriptions"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Content Creators", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["ai", "video", "generation", "machine learning", "content creation"]
dependencies = [
    "langgraph>=0.0.15",
    "langchain-core>=0.1.0", 
    "openai>=1.0.0",
    "dashscope>=1.22.1",
    "ffmpeg-python>=0.2.0",
    "requests>=2.31.0",
    "pandas>=1.3.0",
    "Flask==2.3.3",
    "Flask-SQLAlchemy==3.0.5",
    "Flask-Migrate==4.0.5",
    "Flask-Login==0.6.3",
    "Flask-Bcrypt==1.0.1",
    "python-dotenv==1.0.0",
    "PyMySQL==1.1.0",
    "oss2~=2.18.4",
    "numpy>=1.26.0,<2.0.0",
    "opencv-python>=4.8.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=2.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/ai-movie/ai-movie-generator"
"Bug Reports" = "https://github.com/ai-movie/ai-movie-generator/issues"
"Source Code" = "https://github.com/ai-movie/ai-movie-generator"
Documentation = "https://ai-movie-generator.readthedocs.io/"

[project.scripts]
ai-movie = "ai_movie.cli:main"
ai-movie-web = "ai_movie.web.__main__:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"ai_movie.web" = ["templates/*", "templates/**/*"]

# Code formatting with Black
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Import sorting with isort
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ai_movie"]
known_third_party = ["flask", "openai", "dashscope", "langgraph"]

# Linting with Ruff (replaces flake8)
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# Type checking with mypy
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "dashscope.*",
    "oss2.*",
    "cv2.*",
]
ignore_missing_imports = true

# Testing with pytest  
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage
[tool.coverage.run]
source = ["src/ai_movie"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]